import 'dotenv/config'
import { connectDatabase, sequelize } from '../config/database'

const createServersTable = async () => {
  try {
    console.log('üåç Creating servers table...')

    // ËøûÊé•Êï∞ÊçÆÂ∫ì
    await connectDatabase()

    // ÂàõÂª∫Âå∫ÊúçË°®
    await sequelize.query(`
      CREATE TABLE IF NOT EXISTS servers (
        id bigint NOT NULL AUTO_INCREMENT COMMENT 'Âå∫ÊúçID',
        name varchar(100) NOT NULL COMMENT 'Âå∫ÊúçÂêçÁß∞',
        code varchar(50) NOT NULL COMMENT 'Âå∫ÊúçÁºñÁ†Å',
        region varchar(50) NOT NULL COMMENT 'Âå∫ÊúçÂå∫Âüü',
        status enum('active','inactive','maintenance') NOT NULL DEFAULT 'active' COMMENT 'Âå∫ÊúçÁä∂ÊÄÅ',
        description text COMMENT 'Âå∫ÊúçÊèèËø∞',
        max_players int DEFAULT 10000 COMMENT 'ÊúÄÂ§ßÁé©ÂÆ∂Êï∞',
        open_time datetime COMMENT 'ÂºÄÊúçÊó∂Èó¥',
        created_at datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'ÂàõÂª∫Êó∂Èó¥',
        updated_at datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Êõ¥Êñ∞Êó∂Èó¥',
        PRIMARY KEY (id),
        UNIQUE KEY uk_name (name),
        UNIQUE KEY uk_code (code),
        KEY idx_region (region),
        KEY idx_status (status)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='Âå∫Êúç‰ø°ÊÅØË°®'
    `)

    console.log('‚úÖ Servers table created successfully!')

    // ‰ªéÁé∞ÊúâÊï∞ÊçÆ‰∏≠ÂØºÂÖ•Âå∫Êúç
    console.log('üìä Importing existing servers from ranking data...')
    
    // ‰ªéÊéíË°åÊ¶úÊï∞ÊçÆ‰∏≠Ëé∑ÂèñÂå∫Êúç
    const [existingServers] = await sequelize.query(`
      SELECT DISTINCT server_name as name FROM rank_list
      UNION
      SELECT DISTINCT server as name FROM school
      ORDER BY name
    `)

    if ((existingServers as any[]).length > 0) {
      for (const server of existingServers as any[]) {
        const serverName = server.name
        const serverCode = serverName.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase()
        
        // Âà§Êñ≠Âå∫Âüü
        let region = 'ÂÖ∂‰ªñ'
        if (serverName.includes('QQ')) {
          region = 'QQ'
        } else if (serverName.includes('ÂæÆ‰ø°')) {
          region = 'ÂæÆ‰ø°'
        } else if (serverName.includes('ÂÆâÂçì')) {
          region = 'ÂÆâÂçì'
        }

        try {
          await sequelize.query(`
            INSERT IGNORE INTO servers (name, code, region, status, description, open_time)
            VALUES (?, ?, ?, 'active', ?, NOW())
          `, {
            replacements: [
              serverName,
              serverCode,
              region,
              `${serverName} - Ëá™Âä®ÂØºÂÖ•`
            ]
          })
        } catch (error) {
          console.warn(`Failed to import server ${serverName}:`, error)
        }
      }
      
      console.log(`‚úÖ Imported ${(existingServers as any[]).length} servers from existing data`)
    }

    // ÊòæÁ§∫ÂØºÂÖ•ÁöÑÂå∫Êúç
    const [allServers] = await sequelize.query(`
      SELECT id, name, code, region, status FROM servers ORDER BY region, name
    `)

    console.log('\nüìã Current servers:')
    console.log('================================')
    
    if (Array.isArray(allServers) && allServers.length > 0) {
      let currentRegion = ''
      allServers.forEach((server: any) => {
        if (server.region !== currentRegion) {
          currentRegion = server.region
          console.log(`\n${currentRegion}Âå∫:`)
        }
        console.log(`  - ${server.name} (${server.code}) [${server.status}]`)
      })
    }

    process.exit(0)
  } catch (error) {
    console.error('‚ùå Error creating servers table:', error)
    process.exit(1)
  }
}

createServersTable()
